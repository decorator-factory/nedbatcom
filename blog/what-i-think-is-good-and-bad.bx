<?xml version='1.0' encoding='utf-8'?>
<blog>
<entry when='20200514T063524' draft='y'>
<title>What I think is good and bad</title>
<category></category>
<body>

<p>
</p>


<!--
20140917.log:[15:14:16] <nedbat> benxyzzy: vertical alignment is bad because it means you might have to change many lines just because one of them got wider.
20140930.log:[20:51:33] <nedbat> Wildefyr: also, eval(input()) is bad, just don't do that.
20141011.log:[08:00:59] <nedbat> finster: __del__ is bad in general.
20141026.log:[09:44:07] <nedbat> dw: yes, blindly following stuff is bad.
20141122.log:[13:29:51] <nedbat> Samiel: trolling is bad.  Find a way to use your brains for good.
20141125.log:[20:29:28] <nedbat> sssilver: ok, floats for currency is bad. change that.
20150119.log:[20:30:53] <nedbat> terratoma: any class that you can only instantiate once is bad.
20150320.log:[22:09:25] <nedbat> lewisrjc: everyone agrees that mixing is bad
20150418.log:[08:14:21] <nedbat> litn: this is bad advice
20150619.log:[20:25:27] <nedbat> Jeff__: the combination is bad
20150708.log:[08:05:17] <nedbat> JoeQuery: that sounds like a singleton, which is bad.
20150827.log:[18:16:47] <nedbat> stryngs: sqlite is bad for concurrent access
20151019.log:[19:56:53] <nedbat> Universalalt: what happens after authentication? Also, sqlite is bad at simultaneous access
20151022.log:[21:16:43] <nedbat> soLucien: you just explained to me why sharing a connection between threads is bad.  So you don't need a singleton, it only exists to share the connection between threads.
20151107.log:[21:37:54] <nedbat> Cheaterman: i don't think asking you to use words people understand is bad vibes.
20151119.log:[10:08:35] <nedbat> throstur: that is a good indicator, but you can write really readable code that is bad code.
20151212.log:[07:22:26] <nedbat> phale: that sounds right.  spinning hard like that is bad. the threads should block on an io operation
20160127.log:[06:08:50] <nedbat> John: sqlite is bad at concurrency
20160305.log:[13:21:47] <nedbat> dedgecumbe: my point was this: some people say, "you should start by learning assembler," and i think that is bad advice.
20160705.log:[22:57:08] <nedbat> Zequal: singletons are bad. it's the concept that is bad, not the implementation.
20161021.log:[17:20:55] <nedbat> jaziz: del is fine. __del__ is bad
20161125.log:[06:20:57] <nedbat> lesshaste: and implicit copying is bad, because then how do I shuffle without making a copy?
20170121.log:[13:50:04] <nedbat> texture is bad in code
20170325.log:[12:25:39] <nedbat> Akuli: aligning indents with the opening delimiter is bad.
20170403.log:[17:38:17] <nedbat> StopAndDecrypt: this is bad: def main(nums=[1,2,3]).
20170423.log:[11:41:56] <nedbat> toothe: monkeypatching is bad
20170509.log:[20:26:02] <nedbat> Ether_Man: it is bad to modify a list you are iterating, yes.
20171126.log:[20:40:08] <nedbat> mentalita: __import__ is bad, why bother?
20180106.log:[19:57:35] <nedbat> veek: that is bad advice
20180411.log:[11:05:19] <nedbat> campitor: just import that function then.  import * is bad stuff
20180411.log:[11:15:32] <nedbat> campitor: import * is bad stuff :)  glad it's working
20180813.log:[07:22:03] <nedbat> andrzej: the python doc search is bad
20190527.log:[15:27:20] <nedbat> catern: and-or is bad
20190529.log:[21:22:59] <nedbat> astronavt: singletons are hidden global state, and global state is bad
20190813.log:[10:11:20] <nedbat> horribleprogram: checking types is bad
20191203.log:[08:21:49] <nedbat> cdunklau: ugh, the classic way is bad
20191212.log:[17:01:19] <nedbat> Guest43781: that ":type myparam:"  syntax is bad, it's not readable. use google style instead: https://www.sphinx-doc.org/en/master/usage/extensions/napoleon.html#google-vs-numpy
20191212.log:[17:06:09] <nedbat> rbo: python is bad at recursion deeper than 1000
20200227.log:[17:30:36] <nedbat> gravataflorida: hmm, there is a package on pypi called time, which is bad.  Which module did you want?
-->

<!--

20140917.log:[18:06:15] <nedbat> polymorph: "python -m app_name" is good, but recent.
20140919.log:[20:06:02] <nedbat> nevodka: endswith is good
20140927.log:[12:52:22] <nedbat> djinja: xpath is good at selecting nodes in an xml dom tree.
20140927.log:[22:06:42] <nedbat> rhotic: recursion is good for recursive structures. Iteration is good for iterative structures
20140927.log:[22:29:38] <nedbat> deitarion: the ddt package is good at that.
20140930.log:[17:28:53] <nedbat> jim: that's what for/else is good for.
20141013.log:[20:36:58] <nedbat> yoLo_: compare and append is good.
20141023.log:[13:38:51] <nedbat> LocusAsaf: the ddt package is good at generating test methods
20141108.log:[15:55:17] <nedbat> soggypretzels1: madlibs is good because you can do string manipulation with puerile humor
20141108.log:[19:49:27] <nedbat> stormmore: learning is good! :)
20141110.log:[22:33:02] <nedbat> wbdecker: right, python is good for full applications.
20141126.log:[06:56:19] <nedbat> Xatenev: python is good for writing modern web applications :)
20141128.log:[21:43:02] <nedbat> hays: unittest is good for writing your tests.
20141201.log:[22:09:20] <nedbat> audioburn: re.sub is good. what characters are you replacing?
20141207.log:[17:48:02] <nedbat> cdunklau: mock(spec=thing) is good, right?
20141218.log:[21:56:26] <nedbat> runciter: excitement is good :)
20141220.log:[20:46:09] <nedbat> themediator: also, pip will know how to install into virtualenvs, which is good.
20141224.log:[21:59:27] <nedbat> YoStealth: importlib is good for when you want to do advanced things with imports.  PlaidRab is just trying to get a simple import working.
20150107.log:[19:45:19] <nedbat> learner: gist.github.com is good
20150110.log:[22:06:33] <nedbat> Moult: argparse is good for simple things
20150117.log:[17:11:13] <nedbat> dachary: also, I think it is good to cover your tests, though others disagree with me
20150210.log:[09:08:08] <nedbat> acmehandle: this is good: http://stackoverflow.com/questions/626759/whats-the-difference-between-list-and-tuples  "tuples have structure, lists have order"
20150304.log:[08:15:41] <nedbat> heedly: textwrap.dedent is good for this
20150309.log:[12:07:51] <nedbat> pokEarl: yes, requirements.txt is good for recreaating environments.
20150310.log:[21:59:25] <nedbat> Nick_ZWG: the csv module is good at writing out dicts as rows.
20150320.log:[21:02:18] <nedbat> Vgr: this is good for seeing how it will be formatted: http://rst.ninjs.org/
20150320.log:[22:48:32] <nedbat> mr_yogurt: a single underscore is good for that
20150405.log:[07:27:12] <nedbat> Iloo: colorama is good
20150502.log:[21:08:51] <nedbat> Seylerius: yaml is good
20150511.log:[22:05:37] <nedbat> gmcastil: setUp is good.  tearDown is better down as addCleanup
20150531.log:[15:39:51] <nedbat> dowwie: yield from is good for when you want one generator to produce all the values from another generator.
20150619.log:[20:55:28] <nedbat> badrabbit: requests is good at doing that for you
20150627.log:[16:22:33] <nedbat> iron_houzi: duck typing is good when there's an operation supported across a number of types, and you can just use the operation without worrying about the type.
20150823.log:[21:08:09] <nedbat> voldial: learning is good! :)
20151003.log:[17:08:37] <nedbat> stryngs: yes, bash is good for running binaries.  That hardly makes it a good way to do lots of things.
20151011.log:[19:08:16] <nedbat> ZEDGR: django is good if you like having lots of things handled for you.  Flask is good if you like to put together all the pieces yourself.
20151015.log:[13:37:12] <nedbat> LyndsySimon: seriously, pex is good for this: it's a single-file version of your package and the whole virtualenv
20151212.log:[18:57:38] <nedbat> Linkandzelda: tox is good if you need multiple python versions for one project.
20151228.log:[20:53:06] <nedbat> Guiri: tox is good for testing against multiple environments
20160204.log:[04:49:53] <nedbat> HowardwLo: don't worry about all the edge cases.  For what you want, this is good:  [^@ ]+@[^@ ]+\.[^@ ]+
20160303.log:[22:16:31] <nedbat> tannerstirrat: when math is good, it's very very good :)
20160309.log:[05:46:30] <nedbat> e^1: the python.org tut is good if you have programmed in other languages before.
20160321.log:[08:10:28] <nedbat> tribals: "pip install -e ."  is good
20160328.log:[06:59:13] <nedbat> mueslo: that's about CI, which I wouldn't call deployment.  Tox is good any time you want to run your test suite under a number of different insallation scenarios.
20160328.log:[19:02:24] <nedbat> stercor: the interactive interpreter is good for experimentation, but isn't good for real development.
20160403.log:[08:51:21] <nedbat> aq2: experimentation is good, but people will ask why things happen that they observe.
20160418.log:[21:34:18] <nedbat> max3: some people think type hnting is good, some people think it's silly.  only time will tell how most people will feel
20160424.log:[18:01:29] <nedbat> qdk: twisted is good at any networking use
20160510.log:[11:46:40] <nedbat> diphtherial: bpaste.net is good
20160517.log:[16:54:00] <nedbat> KirkMcDonald: hmm, state is good.
20160523.log:[21:10:57] <nedbat> JustinHitla: Think Python is good
20160620.log:[19:19:24] <nedbat> foo: atexit is good.
20160721.log:[20:26:43] <nedbat> nine_milli: python is good, and we are helpful and friendly :)
20160831.log:[15:49:09] <nedbat> DeltaHeavy: pandas is good if you need to manipulate tables of data. If you don't, then don't use pandas
20160918.log:[09:56:14] <nedbat> Yiota: you want to do something for each thing in a list, that's what a for loop is good for :)
20161015.log:[08:03:32] <nedbat> Paul1337: learning is good, but pinging random people here can be annoying.
20161103.log:[17:16:25] <nedbat> malwar3hun73r: there's an old habit of using ":type:blah:" or whatever, which is horrible. Sphinx now supports the "napoleon" style natively, which is good: http://www.sphinx-doc.org/en/1.4.8/ext/napoleon.html
20161117.log:[10:56:39] <nedbat> f1gjam: pytest does cool assert rewriting, which 99.9999% of the time is good magic.
20161127.log:[08:48:16] <nedbat> zerorax: programmers often have mindsets like "X is slow" or "X is good practice", and they should be thinking "X is slow in $LANGUAGE" or "X is good $LANGUAGE practice"
20161230.log:[16:11:29] <nedbat> Akuli: tox is good
20170122.log:[21:33:56] <nedbat> BaggaTea: and for no good reason: def is good because it looks like the function call, but class syntax is just confusing.
20170131.log:[21:40:53] <nedbat> Goobagoob: pudb is good in the terminal
20170205.log:[14:38:06] <nedbat> zerorax: http://paste.pound-python.org is good
20170207.log:[21:19:48] <nedbat> jfhbrook: trying to be efficient is good.
20170208.log:[08:29:14] <nedbat> mazula: sql is good for some kinds of data. nosql is good for others.
20170208.log:[22:48:31] <nedbat> jfcaron: .format is good
20170219.log:[07:53:59] <nedbat> plasticfish: a decorator is good for wrapping functions in new functionality.
20170327.log:[21:21:08] <nedbat> JeroenDeDauw: python 3 is good, but switching to fix this would be an overreaction
20170404.log:[21:44:18] <nedbat> kutenai: the -k option is good at that.
20170411.log:[07:19:10] <nedbat> gtristan: btw, i would not try to jam everything into setup.py.  this feels like something a makefile is good at.
20170416.log:[08:49:09] <nedbat> valhala_22: Fluent Python is good.  look at the table of contents to see if it covers classes the way you want.
20170420.log:[21:13:03] <nedbat> unomystEz: pytest is good at parameterized tests.
20170429.log:[19:10:10] <nedbat> maroloccio: your self-education is good for the business in the long run.
20170430.log:[12:55:13] <nedbat> SnoopJeDi: "if not list:" is good python
20170627.log:[21:57:35] <nedbat> tsukasa_: @classmethod is good for alternate constructors, yes.
20170707.log:[16:30:37] <nedbat> mandeepb: rg is good: https://github.com/BurntSushi/ripgrep
20170713.log:[12:29:34] <nedbat> psmolak: there's a book called Effective Python :)  Also, Fluent Python is good, though i don't know if it covers what you are looking for.
20170723.log:[18:23:35] <nedbat> also, what you do in your small programs is good practice for what you can later do in your large programs.
20170729.log:[10:21:37] <nedbat> VG234: the prompt is good for doing small experiments.  Once you have larger programs, put them in .py files, and run them:  python myprog.py
20170819.log:[18:09:56] <nedbat> blackbird1: i guess .replace is good so you only change it if it has some existing value.
20170822.log:[21:16:38] <nedbat> Warrigal_: lowtech is good tech
20170911.log:[19:47:09] <nedbat> gaazkam: it depends why you are slicing it, and what you want to do with the parts.  s.partition() is good
20171005.log:[14:06:10] <nedbat> rmah: tell me what you think npm is bad at that python is good at
20171230.log:[09:34:23] <nedbat> FRWB_: no shame! Learning is good.
20171230.log:[15:02:52] <nedbat> rond_: numpy is good when you can do whole-matrix operations at once.  If you need to iterate over elements and do individual operations, it doesn't provide any benefit.
20180101.log:[20:58:19] <nedbat> setuid: i think it is good to separate the xml parsing from the image generation.  Parse the data into a natural in-memory format (not json)
20180126.log:[15:15:05] <nedbat> foo: any is good when you have an iterable of true/false
20180219.log:[18:10:32] <nedbat> rkifoq: do that then. sleep is good.
20180221.log:[17:39:14] <nedbat> xqb: choice is good. Why should there be only one implementation?
20180221.log:[17:43:48] <nedbat> energizer: how does what?  Choice? not sure. choice is good :)
20180224.log:[15:59:50] <nedbat> gist.github.com is good, or paste.pound-python.org
20180302.log:[07:18:46] <nedbat> lesshaste: click is good
20180306.log:[07:08:50] <nedbat> anddam: i don't know the official name for **d.  I think "dict unpacking" is good.
20180322.log:[05:33:26] <nedbat> a-l-e: you're not using a shell, which is good.  And, can you tell us how it is doing the wrong thing?
20180512.log:[14:18:30] <nedbat> rendar: Fluent Python is good, but I don't know if it starts from the beginning
20180515.log:[20:40:57] <nedbat> gambin0: whatever helps you learn is good
20180517.log:[18:25:28] <nedbat> skatetensor: numpy is good when you are doing matrix and array operations. lists are good for ordered collections of things
20180529.log:[18:24:39] <nedbat> adleff: i know what is good for you!
20180603.log:[07:16:37] <nedbat> sl33k: obfuscation isn't something Python is good at.  Why do you want to keep the source a secret?
20180606.log:[19:17:28] <nedbat> kazdax: Gone With The Wind is good
20180702.log:[18:58:44] <nedbat> WhileTrue: that is good, it's returning the value.
20180709.log:[13:04:23] <nedbat> mar77i: the dict is good if it will be sparse
20180714.log:[11:34:07] <nedbat> thevishy: the ast module is good for one thing: representing python programs as a tree of nodes. It provides tools for parsing source text into that tree.
20180807.log:[06:45:22] <nedbat> ArsenArsen: i hear cffi is good for this: http://cffi.readthedocs.io/en/latest/embedding.html
20180811.log:[06:43:42] <nedbat> BouncyKnightMike: python is good as a first language, and you are right that there are huge important differences between python and java
20180815.log:[07:20:20] <nedbat> uniusz: describing commands is bad, showing commands is good.
20180823.log:[19:10:23] <nedbat> ramsub07: docker is good for some things, and overkill for others.  Why are you using docker?
20180902.log:[08:52:01] <nedbat> hazard: because there are very few places where format is good for this
20180902.log:[09:15:07] <nedbat> squirrel: isolation is good, but doing it with mocks can be a problem in itself
20180906.log:[19:23:54] <nedbat> cmptr: line 11 is good for debugging, but is not what you will do when the program is done.
20180921.log:[09:08:19] <nedbat> bbear: subclassing is good for when SubClass, by its essence is a ParentClass.  Your premise directly contradicts that idea.
20180923.log:[13:40:19] <nedbat> kurahaupo: i don't really know how the tiobe index is compiled, or what it is good for :)
20181006.log:[10:32:12] <nedbat> facetoe: that is good
20181008.log:[20:48:49] <nedbat> energizer: #css is good for a nice quiet nap right now :)
20181012.log:[22:45:25] <nedbat> energizer: yours is good too, maybe better :)
20181016.log:[19:05:36] <nedbat> talking is good :)
20181019.log:[20:02:31] <nedbat> stewie925: paste.pound-python.org is good
20181020.log:[21:28:30] <nedbat> energizer: people often want "good" libraries.  Determining whether a library is good is difficult.  We have measurable proxies, but they are only proxies.
20181020.log:[21:29:24] <nedbat> energizer: or you could do it the better but harder way, which is how you determine anything is good: do some research, ask other people, try things out, and see what you think.
20181020.log:[21:40:22] <nedbat> energizer: coverage.py is good. You'd be missing out.
20181022.log:[18:41:56] <nedbat> Alexer: @ is good too
20181023.log:[14:52:02] <nedbat> deviantfero1: re is good for it
20181023.log:[16:43:17] <nedbat> Mat001: you want to run your entire test suite in two different environments: Firefox and Chrome (or whatever).  Tox is good at this
20181027.log:[19:44:34] <nedbat> Frederich: or are you asking if python is good for building web applications?
20181027.log:[19:45:24] <nedbat> Frederich: yes, python is good for building web applications
20181125.log:[20:56:05] <nedbat> esotericnonsense: i think you just said, "mypy doesn't guarantee my code is good"
20181129.log:[19:21:15] <nedbat> Newyorkadam: you don't want a console_script at all I think.  altendky's advice is good: after installing the python package, copy a file
20181129.log:[21:51:52] <nedbat> VarunM: recursion is good for recursive structures (trees).  iteration is better for linear structures (lists)
20181226.log:[20:37:28] <nedbat> setuid: and when you get around to it: html5 is good, xhtml is not.
20181227.log:[16:14:16] <nedbat> gtristan: pylint is a static code checker: the code is good or bad to the same extent regardless of environment
20190119.log:[23:07:59] <nedbat> setuid: no, most people just edit code in text editors.  jupyter is good for visualizations, graphing, tables, etc. interactive experimentation
20190128.log:[19:51:00] <nedbat> Soni: lxml.html is good
20190209.log:[14:05:08] <nedbat> Qulu: sha256 is good too
20190217.log:[17:48:33] <nedbat> butterman: the book Fluent Python is good, if you like books
20190224.log:[07:30:29] <nedbat> Bluerate: for speed, PyPy is good.  Or Cython.  if you want to write C code, you can use cffi to call it from Python
20190224.log:[11:54:48] <nedbat> cswl: machine learning won't help: you have to be able to write the scoring code that decides if the answer is good or not.
20190316.log:[20:34:08] <nedbat> Samian: curiosity is good
20190409.log:[20:18:17] <nedbat> bunbunbunbunny: yes, looks like *args is good.
20190412.log:[05:57:54] <nedbat> rodskagg: collections.Counter is good at counting things, and would do this in O(N).
20190418.log:[12:57:35] <nedbat> onexused: an IDE is an editor, where you edit files. That's where you should be putting most of your code.  The interactive prompt (REPL) is good for short explorations.
20190421.log:[15:29:17] <nedbat> oats: if you want a book, Fluent Python is good. Idiomatic Python is shorter
20190422.log:[07:13:07] <nedbat> mvaenskae: ok, great.  numpy is good for that.  What is the subclassing for?
20190504.log:[21:35:02] <nedbat> Widdershins: tight integration with pytest is good. i made a pull request against it myself for that reason
20190506.log:[14:29:32] <nedbat> loui1986: to me, .encode makes the converstion explicit, which is good.  my_bytes = my_unicode.encode("utf8")
20190508.log:[09:11:23] <nedbat> "floor" is good at taking numbers really close to the right answer and making them far from the right answer
20190514.log:[18:21:31] <nedbat> pyrobby: they is good.
20190515.log:[14:58:48] <nedbat> dementorr: pudb is good
20190522.log:[22:32:36] <nedbat> cliluw: in python 3, super() is good, but it doesn't work in python 2.
20190623.log:[10:09:26] <nedbat> mat001: the -k option is good for this, or you can define markers.
20190707.log:[20:26:46] <nedbat> Jan-: virtualenv is good for separating different projects' needs
20190708.log:[21:42:54] <nedbat> tig is good too
20190722.log:[21:13:49] <nedbat> energizer: rst is good at multi-page docs, without assuming it will be html.  markdown just shrugs and says, "use html when you have to"
20190730.log:[12:06:16] <nedbat> NoImNotNineVolt: the second sentence is good. The first we can do without
20190804.log:[10:15:55] <nedbat> blaa: you'd be surprised what people value, and writing is good just for its own sake.
20190807.log:[21:50:37] <nedbat> kaokao: the django ORM is good at delaying the db work until it's absolutely needed.
20190810.log:[09:25:33] <nedbat> _habnabit: but the "eof token" is good food for thought
20190818.log:[21:24:11] <nedbat> Oksana: bpaste.net is good.
20190821.log:[17:52:24] <nedbat> iamthestig: you keep a count of how many consecutive you have seen. Then if the current one is good, you add one to the count. if it's not, you set the count to 1.
20190906.log:[19:16:04] <nedbat> Unplesantry: ##programming is good for broader topics
20190906.log:[21:35:21] <nedbat> ioSky16: you don't have to worry about those comments.  Let's just talk about what you want to do, and whether Python is good for it.
20191001.log:[21:29:30] <nedbat> learning is good
20191010.log:[11:56:31] <nedbat> adder: that last rule is good for skipping minified files
20191028.log:[16:53:26] <nedbat> glow8: dependencies are good. using other people's solutions to your problems is good.
20191103.log:[05:48:17] <nedbat> guyman20: how do you evaluate whether a swap is good?
20191125.log:[15:49:58] <nedbat> eroen: the struct module is good for this. it might be easier to skip "array"
20191231.log:[13:42:12] <nedbat> glow8: _habnabit's point is that other languages are better than C for the things C is good at.
20200110.log:[10:39:10] <nedbat> eoli3n: split has a much better PR agency, but partition is good too
20200205.log:[21:24:28] <nedbat> grym: that is good to hear
20200213.log:[06:23:58] <nedbat> __that__: attribute access is good.
20200220.log:[09:21:37] <nedbat> graingert: that is good to hear
20200221.log:[17:53:15] <nedbat> e: i won't say that loops should introduce scopes, but it is good to be able to understand the interplay between scoping and closur-ing
20200223.log:[12:23:12] <nedbat> noway96: prompt_toolkit is good for this
20200223.log:[19:02:22] <nedbat> cgi: https://pypi.org/project/appdirs/ is good for answering that question
20200308.log:[12:40:58] <nedbat> hikemu: automate the boring stuff is good.  What kind of software will you be writing?
20200316.log:[08:32:39] <nedbat> floppydh: iso8601 is good
20200316.log:[09:03:39] <nedbat> lnadav: you need a TUI library for that. prompt_toolkit is good
20200322.log:[12:04:14] <nedbat> FabTG: prompt_toolkit is good
20200324.log:[09:49:27] <nedbat> banshi: prompt_toolkit is good too
20200328.log:[16:31:24] <nedbat> gpp: Fluent Python is good, not sure if it covers what you want.  I think you are looking for less technical, and more cultural info
20200331.log:[21:32:05] <nedbat> seanicus: prompt_toolkit is good, and has lots of samples
20200406.log:[20:40:50] <nedbat> Capricious: if the halfway is good, then you go to halfway towards B, else go halfway towards A, and so on.
20200406.log:[21:31:53] <nedbat> Capricious: if the course is good, the exercises will help cement your understanding
20200420.log:[09:35:56] <nedbat> acresearch: numpy is good when you have an array full of data, and you can do one operation that works on all of it at once
20200425.log:[12:04:51] <nedbat> purplex88: it doesn't keep track. it's an algorithm that is good at picking uniformly between 0 and 1.
-->

</body>
</entry>
</blog>
